services:
  api:
    image: articles_feed_api:latest
    container_name: articles_feed_api
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "8080:8080"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - dev_network
  postgres:
    image: postgres:17.5-alpine
    container_name: articles_feed_postgres
    env_file:
      - .env
    ports:
      - "5432:5432"
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - dev_network
  postgres_test:
    image: postgres:17.5-alpine
    container_name: articles_feed_postgres_test
    env_file:
      - .env.test
    ports:
      - "5433:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - dev_network

volumes:
  postgres_data:
    driver: local

networks:
  dev_network:
    driver: bridge
